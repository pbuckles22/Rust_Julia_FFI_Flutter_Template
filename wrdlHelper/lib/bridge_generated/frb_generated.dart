// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'wordle_ffi.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 1361054081;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'wrdl_helper_ffi',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  FfiGuessResult crateWordleFfiCreateGuessResult({
    required String word,
    required List<FfiLetterResult> results,
  });

  List<String> crateWordleFfiFilterWords({
    required List<String> allWords,
    required List<FfiGuessResult> guessResults,
  });

  List<String> crateWordleFfiGetAllWords({required List<String> allWords});

  String? crateWordleFfiGetBestGuess({
    required List<String> allWords,
    required List<String> remainingWords,
  });

  String? crateWordleFfiGetIntelligentGuess({
    required List<String> allWords,
    required List<String> remainingWords,
    required List<FfiGuessResult> guessResults,
  });

  String? crateWordleFfiGetRandomAnswerWord({
    required List<String> answerWords,
  });

  String crateWordleFfiHelloRust({required String message});

  void crateWordleFfiInitWordleFfi();

  List<String> crateWordleFfiLoadWordListsFromJson({required String jsonPath});

  List<String> crateWordleFfiLoadWordListsFromTextFiles({
    required String answerPath,
    required String guessPath,
  });

  bool crateWordleFfiValidateWord({required String word});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  FfiGuessResult crateWordleFfiCreateGuessResult({
    required String word,
    required List<FfiLetterResult> results,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(word, serializer);
          sse_encode_list_ffi_letter_result(results, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_ffi_guess_result,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateWordleFfiCreateGuessResultConstMeta,
        argValues: [word, results],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateWordleFfiCreateGuessResultConstMeta =>
      const TaskConstMeta(
        debugName: "create_guess_result",
        argNames: ["word", "results"],
      );

  @override
  List<String> crateWordleFfiFilterWords({
    required List<String> allWords,
    required List<FfiGuessResult> guessResults,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_String(allWords, serializer);
          sse_encode_list_ffi_guess_result(guessResults, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateWordleFfiFilterWordsConstMeta,
        argValues: [allWords, guessResults],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateWordleFfiFilterWordsConstMeta => const TaskConstMeta(
    debugName: "filter_words",
    argNames: ["allWords", "guessResults"],
  );

  @override
  List<String> crateWordleFfiGetAllWords({required List<String> allWords}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_String(allWords, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateWordleFfiGetAllWordsConstMeta,
        argValues: [allWords],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateWordleFfiGetAllWordsConstMeta =>
      const TaskConstMeta(debugName: "get_all_words", argNames: ["allWords"]);

  @override
  String? crateWordleFfiGetBestGuess({
    required List<String> allWords,
    required List<String> remainingWords,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_String(allWords, serializer);
          sse_encode_list_String(remainingWords, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateWordleFfiGetBestGuessConstMeta,
        argValues: [allWords, remainingWords],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateWordleFfiGetBestGuessConstMeta => const TaskConstMeta(
    debugName: "get_best_guess",
    argNames: ["allWords", "remainingWords"],
  );

  @override
  String? crateWordleFfiGetIntelligentGuess({
    required List<String> allWords,
    required List<String> remainingWords,
    required List<FfiGuessResult> guessResults,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_String(allWords, serializer);
          sse_encode_list_String(remainingWords, serializer);
          sse_encode_list_ffi_guess_result(guessResults, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateWordleFfiGetIntelligentGuessConstMeta,
        argValues: [allWords, remainingWords, guessResults],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateWordleFfiGetIntelligentGuessConstMeta =>
      const TaskConstMeta(
        debugName: "get_intelligent_guess",
        argNames: ["allWords", "remainingWords", "guessResults"],
      );

  @override
  String? crateWordleFfiGetRandomAnswerWord({
    required List<String> answerWords,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_String(answerWords, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateWordleFfiGetRandomAnswerWordConstMeta,
        argValues: [answerWords],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateWordleFfiGetRandomAnswerWordConstMeta =>
      const TaskConstMeta(
        debugName: "get_random_answer_word",
        argNames: ["answerWords"],
      );

  @override
  String crateWordleFfiHelloRust({required String message}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(message, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateWordleFfiHelloRustConstMeta,
        argValues: [message],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateWordleFfiHelloRustConstMeta =>
      const TaskConstMeta(debugName: "hello_rust", argNames: ["message"]);

  @override
  void crateWordleFfiInitWordleFfi() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateWordleFfiInitWordleFfiConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateWordleFfiInitWordleFfiConstMeta =>
      const TaskConstMeta(debugName: "init_wordle_ffi", argNames: []);

  @override
  List<String> crateWordleFfiLoadWordListsFromJson({required String jsonPath}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(jsonPath, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateWordleFfiLoadWordListsFromJsonConstMeta,
        argValues: [jsonPath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateWordleFfiLoadWordListsFromJsonConstMeta =>
      const TaskConstMeta(
        debugName: "load_word_lists_from_json",
        argNames: ["jsonPath"],
      );

  @override
  List<String> crateWordleFfiLoadWordListsFromTextFiles({
    required String answerPath,
    required String guessPath,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(answerPath, serializer);
          sse_encode_String(guessPath, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateWordleFfiLoadWordListsFromTextFilesConstMeta,
        argValues: [answerPath, guessPath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateWordleFfiLoadWordListsFromTextFilesConstMeta =>
      const TaskConstMeta(
        debugName: "load_word_lists_from_text_files",
        argNames: ["answerPath", "guessPath"],
      );

  @override
  bool crateWordleFfiValidateWord({required String word}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(word, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateWordleFfiValidateWordConstMeta,
        argValues: [word],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateWordleFfiValidateWordConstMeta =>
      const TaskConstMeta(debugName: "validate_word", argNames: ["word"]);

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  FfiGuessResult dco_decode_ffi_guess_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FfiGuessResult(
      word: dco_decode_String(arr[0]),
      results: dco_decode_list_ffi_letter_result(arr[1]),
    );
  }

  @protected
  FfiLetterResult dco_decode_ffi_letter_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiLetterResult.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<FfiGuessResult> dco_decode_list_ffi_guess_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ffi_guess_result).toList();
  }

  @protected
  List<FfiLetterResult> dco_decode_list_ffi_letter_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ffi_letter_result).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  FfiGuessResult sse_decode_ffi_guess_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_word = sse_decode_String(deserializer);
    var var_results = sse_decode_list_ffi_letter_result(deserializer);
    return FfiGuessResult(word: var_word, results: var_results);
  }

  @protected
  FfiLetterResult sse_decode_ffi_letter_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return FfiLetterResult.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<FfiGuessResult> sse_decode_list_ffi_guess_result(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FfiGuessResult>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ffi_guess_result(deserializer));
    }
    return ans_;
  }

  @protected
  List<FfiLetterResult> sse_decode_list_ffi_letter_result(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FfiLetterResult>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ffi_letter_result(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_ffi_guess_result(
    FfiGuessResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.word, serializer);
    sse_encode_list_ffi_letter_result(self.results, serializer);
  }

  @protected
  void sse_encode_ffi_letter_result(
    FfiLetterResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ffi_guess_result(
    List<FfiGuessResult> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ffi_guess_result(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ffi_letter_result(
    List<FfiLetterResult> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ffi_letter_result(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}
