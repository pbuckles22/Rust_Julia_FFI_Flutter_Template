// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `eq`, `fmt`, `fmt`, `from`, `from`

/// Initialize the FFI bridge
/// This function should be called when the Flutter app starts
void initWordleFfi() => RustLib.instance.api.crateWordleFfiInitWordleFfi();

/// Load word lists from JSON file and return all words
/// This replaces the asset loading in the Flutter app
List<String> loadWordListsFromJson({required String jsonPath}) => RustLib
    .instance
    .api
    .crateWordleFfiLoadWordListsFromJson(jsonPath: jsonPath);

/// Load word lists from text files and return all words
/// This provides an alternative loading method
List<String> loadWordListsFromTextFiles({
  required String answerPath,
  required String guessPath,
}) => RustLib.instance.api.crateWordleFfiLoadWordListsFromTextFiles(
  answerPath: answerPath,
  guessPath: guessPath,
);

/// Filter words based on guess results
/// This is the core functionality that replaces the mock filtering
List<String> filterWords({
  required List<String> allWords,
  required List<FfiGuessResult> guessResults,
}) => RustLib.instance.api.crateWordleFfiFilterWords(
  allWords: allWords,
  guessResults: guessResults,
);

/// Get the best guess suggestion from remaining words using intelligent algorithms
/// This provides the AI suggestion functionality with entropy-based selection
String? getBestGuess({
  required List<String> allWords,
  required List<String> remainingWords,
}) => RustLib.instance.api.crateWordleFfiGetBestGuess(
  allWords: allWords,
  remainingWords: remainingWords,
);

/// Get the best guess suggestion with full game context using intelligent algorithms
/// This provides enhanced AI suggestion functionality with full game state analysis
String? getIntelligentGuess({
  required List<String> allWords,
  required List<String> remainingWords,
  required List<FfiGuessResult> guessResults,
}) => RustLib.instance.api.crateWordleFfiGetIntelligentGuess(
  allWords: allWords,
  remainingWords: remainingWords,
  guessResults: guessResults,
);

/// Create a guess result from word and letter results
/// This helps construct guess results from Flutter
FfiGuessResult createGuessResult({
  required String word,
  required List<FfiLetterResult> results,
}) => RustLib.instance.api.crateWordleFfiCreateGuessResult(
  word: word,
  results: results,
);

/// Validate that a word is valid (5 letters, all uppercase)
/// This provides word validation functionality
bool validateWord({required String word}) =>
    RustLib.instance.api.crateWordleFfiValidateWord(word: word);

/// Get all words from a word list
/// This provides access to the full word list
List<String> getAllWords({required List<String> allWords}) =>
    RustLib.instance.api.crateWordleFfiGetAllWords(allWords: allWords);

/// Get a random answer word from the answer words list
/// This provides random word generation for testing purposes
String? getRandomAnswerWord({required List<String> answerWords}) => RustLib
    .instance
    .api
    .crateWordleFfiGetRandomAnswerWord(answerWords: answerWords);

/// A simple function to test the FFI bridge
/// This provides a minimal test case to verify Flutter <-> Rust communication
String helloRust({required String message}) =>
    RustLib.instance.api.crateWordleFfiHelloRust(message: message);

class FfiGuessResult {
  final String word;
  final List<FfiLetterResult> results;

  const FfiGuessResult({required this.word, required this.results});

  @override
  int get hashCode => word.hashCode ^ results.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiGuessResult &&
          runtimeType == other.runtimeType &&
          word == other.word &&
          results == other.results;
}

enum FfiLetterResult { gray, yellow, green }
