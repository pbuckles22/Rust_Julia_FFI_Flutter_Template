// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'api/wrdl_helper.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  RustLib._();
  @internal
  static final instance = RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -586896733;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_wrdlhelper',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  List<String> crateApiWrdlHelperWordManagerAutoAccessorGetAnswerWords({
    required WordManager that,
  });

  List<String> crateApiWrdlHelperWordManagerAutoAccessorGetGuessWords({
    required WordManager that,
  });

  String? crateApiWrdlHelperWordManagerAutoAccessorGetOptimalFirstGuess({
    required WordManager that,
  });

  void crateApiWrdlHelperWordManagerAutoAccessorSetAnswerWords({
    required WordManager that,
    required List<String> answerWords,
  });

  void crateApiWrdlHelperWordManagerAutoAccessorSetGuessWords({
    required WordManager that,
    required List<String> guessWords,
  });

  void crateApiWrdlHelperWordManagerAutoAccessorSetOptimalFirstGuess({
    required WordManager that,
    String? optimalFirstGuess,
  });

  Future<void> crateApiWrdlHelperWordManagerComputeOptimalFirstGuess({
    required WordManager that,
  });

  Future<void> crateApiWrdlHelperWordManagerGetAnswerWords({
    required WordManager that,
  });

  Future<void> crateApiWrdlHelperWordManagerGetGuessWords({
    required WordManager that,
  });

  Future<String?> crateApiWrdlHelperWordManagerGetOptimalFirstGuess({
    required WordManager that,
  });

  Future<void> crateApiWrdlHelperWordManagerLoadWords({
    required WordManager that,
  });

  Future<WordManager> crateApiWrdlHelperWordManagerNew();

  int? crateApiSimpleAddNumbers({required int a, required int b});

  double crateApiSimpleCalculateEntropy({
    required String candidateWord,
    required List<String> remainingWords,
  });

  Map<String, String> crateApiSimpleCreateStringMap({
    required List<(String, String)> pairs,
  });

  int crateApiSimpleFactorial({required int n});

  List<String> crateApiSimpleFilterWords({
    required List<String> words,
    required List<(String, List<String>)> guessResults,
  });

  List<String> crateApiSimpleGetAnswerWords();

  BigInt crateApiSimpleGetCurrentTimestamp();

  List<String> crateApiSimpleGetGuessWords();

  String? crateApiSimpleGetIntelligentGuess({
    required List<String> allWords,
    required List<String> remainingWords,
    required List<(String, List<String>)> guessResults,
  });

  String? crateApiSimpleGetIntelligentGuessFast({
    required List<String> remainingWords,
    required List<(String, List<String>)> guessResults,
  });

  String? crateApiSimpleGetIntelligentGuessReference({
    required List<String> remainingWords,
    required List<(String, List<String>)> guessResults,
  });

  String? crateApiSimpleGetOptimalFirstGuess();

  (bool, bool, int, bool, double, bool) crateApiSimpleGetSolverConfig();

  Uint32List crateApiSimpleGetStringLengths({required List<String> strings});

  String crateApiSimpleGreet({required String name});

  Future<GuessResult> crateApiWrdlHelperGuessResultNew({
    required String word,
    required LetterResultArray5 results,
  });

  Future<void> crateApiSimpleInitApp();

  void crateApiSimpleInitializeWordLists();

  Future<double> crateApiWrdlHelperIntelligentSolverCalculateEntropy({
    required IntelligentSolver that,
    required String candidateWord,
    required List<String> remainingWords,
  });

  Future<double> crateApiWrdlHelperIntelligentSolverCalculateStatisticalScore({
    required IntelligentSolver that,
    required String candidateWord,
    required List<String> remainingWords,
  });

  Future<List<String>> crateApiWrdlHelperIntelligentSolverFilterWords({
    required IntelligentSolver that,
    required List<String> words,
    required List<GuessResult> guessResults,
  });

  Future<String?> crateApiWrdlHelperIntelligentSolverGetBestGuess({
    required IntelligentSolver that,
    required List<String> remainingWords,
    required List<GuessResult> guessResults,
  });

  Future<IntelligentSolver> crateApiWrdlHelperIntelligentSolverNew({
    required List<String> words,
  });

  Future<String> crateApiWrdlHelperIntelligentSolverSimulateGuessPattern({
    required IntelligentSolver that,
    required String guess,
    required String target,
  });

  Future<bool> crateApiWrdlHelperIntelligentSolverWordMatchesPattern({
    required IntelligentSolver that,
    required String word,
    required GuessResult guessResult,
  });

  bool crateApiSimpleIsEven({required int number});

  bool crateApiSimpleIsPalindrome({required String text});

  bool crateApiSimpleIsValidWord({required String word});

  void crateApiSimpleLoadWordListsFromDart({
    required List<String> answerWords,
    required List<String> guessWords,
  });

  double crateApiSimpleMultiplyFloats({required double a, required double b});

  void crateApiSimpleSetSolverConfig({
    required bool referenceMode,
    required bool includeKillerWords,
    required int candidateCap,
    required bool earlyTerminationEnabled,
    required double earlyTerminationThreshold,
    required bool entropyOnlyScoring,
  });

  int crateApiSimpleSimpleHash({required String input});

  String crateApiSimpleSimulateGuessPattern({
    required String guess,
    required String target,
  });

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_WordManager;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_WordManager;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WordManagerPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  List<String> crateApiWrdlHelperWordManagerAutoAccessorGetAnswerWords({
    required WordManager that,
  }) => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
          that,
          serializer,
        );
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiWrdlHelperWordManagerAutoAccessorGetAnswerWordsConstMeta,
      argValues: [that],
      apiImpl: this,
    ),
  );

  TaskConstMeta
  get kCrateApiWrdlHelperWordManagerAutoAccessorGetAnswerWordsConstMeta =>
      const TaskConstMeta(
        debugName: 'WordManager_auto_accessor_get_answer_words',
        argNames: ['that'],
      );

  @override
  List<String> crateApiWrdlHelperWordManagerAutoAccessorGetGuessWords({
    required WordManager that,
  }) => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
          that,
          serializer,
        );
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiWrdlHelperWordManagerAutoAccessorGetGuessWordsConstMeta,
      argValues: [that],
      apiImpl: this,
    ),
  );

  TaskConstMeta
  get kCrateApiWrdlHelperWordManagerAutoAccessorGetGuessWordsConstMeta =>
      const TaskConstMeta(
        debugName: 'WordManager_auto_accessor_get_guess_words',
        argNames: ['that'],
      );

  @override
  String? crateApiWrdlHelperWordManagerAutoAccessorGetOptimalFirstGuess({
    required WordManager that,
  }) => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
          that,
          serializer,
        );
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiWrdlHelperWordManagerAutoAccessorGetOptimalFirstGuessConstMeta,
      argValues: [that],
      apiImpl: this,
    ),
  );

  TaskConstMeta
  get kCrateApiWrdlHelperWordManagerAutoAccessorGetOptimalFirstGuessConstMeta =>
      const TaskConstMeta(
        debugName: 'WordManager_auto_accessor_get_optimal_first_guess',
        argNames: ['that'],
      );

  @override
  void crateApiWrdlHelperWordManagerAutoAccessorSetAnswerWords({
    required WordManager that,
    required List<String> answerWords,
  }) => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
          that,
          serializer,
        );
        sse_encode_list_String(answerWords, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiWrdlHelperWordManagerAutoAccessorSetAnswerWordsConstMeta,
      argValues: [that, answerWords],
      apiImpl: this,
    ),
  );

  TaskConstMeta
  get kCrateApiWrdlHelperWordManagerAutoAccessorSetAnswerWordsConstMeta =>
      const TaskConstMeta(
        debugName: 'WordManager_auto_accessor_set_answer_words',
        argNames: ['that', 'answerWords'],
      );

  @override
  void crateApiWrdlHelperWordManagerAutoAccessorSetGuessWords({
    required WordManager that,
    required List<String> guessWords,
  }) => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
          that,
          serializer,
        );
        sse_encode_list_String(guessWords, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiWrdlHelperWordManagerAutoAccessorSetGuessWordsConstMeta,
      argValues: [that, guessWords],
      apiImpl: this,
    ),
  );

  TaskConstMeta
  get kCrateApiWrdlHelperWordManagerAutoAccessorSetGuessWordsConstMeta =>
      const TaskConstMeta(
        debugName: 'WordManager_auto_accessor_set_guess_words',
        argNames: ['that', 'guessWords'],
      );

  @override
  void crateApiWrdlHelperWordManagerAutoAccessorSetOptimalFirstGuess({
    required WordManager that,
    String? optimalFirstGuess,
  }) => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
          that,
          serializer,
        );
        sse_encode_opt_String(optimalFirstGuess, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiWrdlHelperWordManagerAutoAccessorSetOptimalFirstGuessConstMeta,
      argValues: [that, optimalFirstGuess],
      apiImpl: this,
    ),
  );

  TaskConstMeta
  get kCrateApiWrdlHelperWordManagerAutoAccessorSetOptimalFirstGuessConstMeta =>
      const TaskConstMeta(
        debugName: 'WordManager_auto_accessor_set_optimal_first_guess',
        argNames: ['that', 'optimalFirstGuess'],
      );

  @override
  Future<void> crateApiWrdlHelperWordManagerComputeOptimalFirstGuess({
    required WordManager that,
  }) => handler.executeNormal(
    NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
          that,
          serializer,
        );
        pdeCallFfi(
          generalizedFrbRustBinding,
          serializer,
          funcId: 7,
          port: port_,
        );
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiWrdlHelperWordManagerComputeOptimalFirstGuessConstMeta,
      argValues: [that],
      apiImpl: this,
    ),
  );

  TaskConstMeta
  get kCrateApiWrdlHelperWordManagerComputeOptimalFirstGuessConstMeta =>
      const TaskConstMeta(
        debugName: 'WordManager_compute_optimal_first_guess',
        argNames: ['that'],
      );

  @override
  Future<void> crateApiWrdlHelperWordManagerGetAnswerWords({
    required WordManager that,
  }) => handler.executeNormal(
    NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
          that,
          serializer,
        );
        pdeCallFfi(
          generalizedFrbRustBinding,
          serializer,
          funcId: 8,
          port: port_,
        );
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWrdlHelperWordManagerGetAnswerWordsConstMeta,
      argValues: [that],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiWrdlHelperWordManagerGetAnswerWordsConstMeta =>
      const TaskConstMeta(
        debugName: 'WordManager_get_answer_words',
        argNames: ['that'],
      );

  @override
  Future<void> crateApiWrdlHelperWordManagerGetGuessWords({
    required WordManager that,
  }) => handler.executeNormal(
    NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
          that,
          serializer,
        );
        pdeCallFfi(
          generalizedFrbRustBinding,
          serializer,
          funcId: 9,
          port: port_,
        );
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWrdlHelperWordManagerGetGuessWordsConstMeta,
      argValues: [that],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiWrdlHelperWordManagerGetGuessWordsConstMeta =>
      const TaskConstMeta(
        debugName: 'WordManager_get_guess_words',
        argNames: ['that'],
      );

  @override
  Future<String?> crateApiWrdlHelperWordManagerGetOptimalFirstGuess({
    required WordManager that,
  }) => handler.executeNormal(
    NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
          that,
          serializer,
        );
        pdeCallFfi(
          generalizedFrbRustBinding,
          serializer,
          funcId: 10,
          port: port_,
        );
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWrdlHelperWordManagerGetOptimalFirstGuessConstMeta,
      argValues: [that],
      apiImpl: this,
    ),
  );

  TaskConstMeta
  get kCrateApiWrdlHelperWordManagerGetOptimalFirstGuessConstMeta =>
      const TaskConstMeta(
        debugName: 'WordManager_get_optimal_first_guess',
        argNames: ['that'],
      );

  @override
  Future<void> crateApiWrdlHelperWordManagerLoadWords({
    required WordManager that,
  }) => handler.executeNormal(
    NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
          that,
          serializer,
        );
        pdeCallFfi(
          generalizedFrbRustBinding,
          serializer,
          funcId: 11,
          port: port_,
        );
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiWrdlHelperWordManagerLoadWordsConstMeta,
      argValues: [that],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiWrdlHelperWordManagerLoadWordsConstMeta =>
      const TaskConstMeta(
        debugName: 'WordManager_load_words',
        argNames: ['that'],
      );

  @override
  Future<WordManager>
  crateApiWrdlHelperWordManagerNew() => handler.executeNormal(
    NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(
          generalizedFrbRustBinding,
          serializer,
          funcId: 12,
          port: port_,
        );
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWrdlHelperWordManagerNewConstMeta,
      argValues: [],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiWrdlHelperWordManagerNewConstMeta =>
      const TaskConstMeta(debugName: 'WordManager_new', argNames: []);

  @override
  int? crateApiSimpleAddNumbers({required int a, required int b}) =>
      handler.executeSync(
        SyncTask(
          callFfi: () {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_i_32(a, serializer);
            sse_encode_i_32(b, serializer);
            return pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 13,
            )!;
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiSimpleAddNumbersConstMeta,
          argValues: [a, b],
          apiImpl: this,
        ),
      );

  TaskConstMeta get kCrateApiSimpleAddNumbersConstMeta =>
      const TaskConstMeta(debugName: 'add_numbers', argNames: ['a', 'b']);

  @override
  double crateApiSimpleCalculateEntropy({
    required String candidateWord,
    required List<String> remainingWords,
  }) => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(candidateWord, serializer);
        sse_encode_list_String(remainingWords, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleCalculateEntropyConstMeta,
      argValues: [candidateWord, remainingWords],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiSimpleCalculateEntropyConstMeta =>
      const TaskConstMeta(
        debugName: 'calculate_entropy',
        argNames: ['candidateWord', 'remainingWords'],
      );

  @override
  Map<String, String> crateApiSimpleCreateStringMap({
    required List<(String, String)> pairs,
  }) => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_record_string_string(pairs, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_String_None,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleCreateStringMapConstMeta,
      argValues: [pairs],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiSimpleCreateStringMapConstMeta =>
      const TaskConstMeta(debugName: 'create_string_map', argNames: ['pairs']);

  @override
  int crateApiSimpleFactorial({required int n}) => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(n, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleFactorialConstMeta,
      argValues: [n],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiSimpleFactorialConstMeta =>
      const TaskConstMeta(debugName: 'factorial', argNames: ['n']);

  @override
  List<String> crateApiSimpleFilterWords({
    required List<String> words,
    required List<(String, List<String>)> guessResults,
  }) => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(words, serializer);
        sse_encode_list_record_string_list_string(guessResults, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleFilterWordsConstMeta,
      argValues: [words, guessResults],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiSimpleFilterWordsConstMeta => const TaskConstMeta(
    debugName: 'filter_words',
    argNames: ['words', 'guessResults'],
  );

  @override
  List<String> crateApiSimpleGetAnswerWords() => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiSimpleGetAnswerWordsConstMeta,
      argValues: [],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiSimpleGetAnswerWordsConstMeta =>
      const TaskConstMeta(debugName: 'get_answer_words', argNames: []);

  @override
  BigInt crateApiSimpleGetCurrentTimestamp() => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGetCurrentTimestampConstMeta,
      argValues: [],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiSimpleGetCurrentTimestampConstMeta =>
      const TaskConstMeta(debugName: 'get_current_timestamp', argNames: []);

  @override
  List<String> crateApiSimpleGetGuessWords() => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiSimpleGetGuessWordsConstMeta,
      argValues: [],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiSimpleGetGuessWordsConstMeta =>
      const TaskConstMeta(debugName: 'get_guess_words', argNames: []);

  @override
  String? crateApiSimpleGetIntelligentGuess({
    required List<String> allWords,
    required List<String> remainingWords,
    required List<(String, List<String>)> guessResults,
  }) => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(allWords, serializer);
        sse_encode_list_String(remainingWords, serializer);
        sse_encode_list_record_string_list_string(guessResults, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGetIntelligentGuessConstMeta,
      argValues: [allWords, remainingWords, guessResults],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiSimpleGetIntelligentGuessConstMeta =>
      const TaskConstMeta(
        debugName: 'get_intelligent_guess',
        argNames: ['allWords', 'remainingWords', 'guessResults'],
      );

  @override
  String? crateApiSimpleGetIntelligentGuessFast({
    required List<String> remainingWords,
    required List<(String, List<String>)> guessResults,
  }) => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(remainingWords, serializer);
        sse_encode_list_record_string_list_string(guessResults, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGetIntelligentGuessFastConstMeta,
      argValues: [remainingWords, guessResults],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiSimpleGetIntelligentGuessFastConstMeta =>
      const TaskConstMeta(
        debugName: 'get_intelligent_guess_fast',
        argNames: ['remainingWords', 'guessResults'],
      );

  @override
  String? crateApiSimpleGetIntelligentGuessReference({
    required List<String> remainingWords,
    required List<(String, List<String>)> guessResults,
  }) => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(remainingWords, serializer);
        sse_encode_list_record_string_list_string(guessResults, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGetIntelligentGuessReferenceConstMeta,
      argValues: [remainingWords, guessResults],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiSimpleGetIntelligentGuessReferenceConstMeta =>
      const TaskConstMeta(
        debugName: 'get_intelligent_guess_reference',
        argNames: ['remainingWords', 'guessResults'],
      );

  @override
  String? crateApiSimpleGetOptimalFirstGuess() => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGetOptimalFirstGuessConstMeta,
      argValues: [],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiSimpleGetOptimalFirstGuessConstMeta =>
      const TaskConstMeta(debugName: 'get_optimal_first_guess', argNames: []);

  @override
  (bool, bool, int, bool, double, bool) crateApiSimpleGetSolverConfig() =>
      handler.executeSync(
        SyncTask(
          callFfi: () {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            return pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 25,
            )!;
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_record_bool_bool_i_32_bool_f_64_bool,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiSimpleGetSolverConfigConstMeta,
          argValues: [],
          apiImpl: this,
        ),
      );

  TaskConstMeta get kCrateApiSimpleGetSolverConfigConstMeta =>
      const TaskConstMeta(debugName: 'get_solver_config', argNames: []);

  @override
  Uint32List crateApiSimpleGetStringLengths({required List<String> strings}) =>
      handler.executeSync(
        SyncTask(
          callFfi: () {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_list_String(strings, serializer);
            return pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 26,
            )!;
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_list_prim_u_32_strict,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiSimpleGetStringLengthsConstMeta,
          argValues: [strings],
          apiImpl: this,
        ),
      );

  TaskConstMeta get kCrateApiSimpleGetStringLengthsConstMeta =>
      const TaskConstMeta(
        debugName: 'get_string_lengths',
        argNames: ['strings'],
      );

  @override
  String crateApiSimpleGreet({required String name}) => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiSimpleGreetConstMeta =>
      const TaskConstMeta(debugName: 'greet', argNames: ['name']);

  @override
  Future<GuessResult> crateApiWrdlHelperGuessResultNew({
    required String word,
    required LetterResultArray5 results,
  }) => handler.executeNormal(
    NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(word, serializer);
        sse_encode_letter_result_array_5(results, serializer);
        pdeCallFfi(
          generalizedFrbRustBinding,
          serializer,
          funcId: 28,
          port: port_,
        );
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_guess_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWrdlHelperGuessResultNewConstMeta,
      argValues: [word, results],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiWrdlHelperGuessResultNewConstMeta =>
      const TaskConstMeta(
        debugName: 'guess_result_new',
        argNames: ['word', 'results'],
      );

  @override
  Future<void> crateApiSimpleInitApp() => handler.executeNormal(
    NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(
          generalizedFrbRustBinding,
          serializer,
          funcId: 29,
          port: port_,
        );
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta =>
      const TaskConstMeta(debugName: 'init_app', argNames: []);

  @override
  void crateApiSimpleInitializeWordLists() => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiSimpleInitializeWordListsConstMeta,
      argValues: [],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiSimpleInitializeWordListsConstMeta =>
      const TaskConstMeta(debugName: 'initialize_word_lists', argNames: []);

  @override
  Future<double> crateApiWrdlHelperIntelligentSolverCalculateEntropy({
    required IntelligentSolver that,
    required String candidateWord,
    required List<String> remainingWords,
  }) => handler.executeNormal(
    NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_intelligent_solver(that, serializer);
        sse_encode_String(candidateWord, serializer);
        sse_encode_list_String(remainingWords, serializer);
        pdeCallFfi(
          generalizedFrbRustBinding,
          serializer,
          funcId: 31,
          port: port_,
        );
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWrdlHelperIntelligentSolverCalculateEntropyConstMeta,
      argValues: [that, candidateWord, remainingWords],
      apiImpl: this,
    ),
  );

  TaskConstMeta
  get kCrateApiWrdlHelperIntelligentSolverCalculateEntropyConstMeta =>
      const TaskConstMeta(
        debugName: 'intelligent_solver_calculate_entropy',
        argNames: ['that', 'candidateWord', 'remainingWords'],
      );

  @override
  Future<double> crateApiWrdlHelperIntelligentSolverCalculateStatisticalScore({
    required IntelligentSolver that,
    required String candidateWord,
    required List<String> remainingWords,
  }) => handler.executeNormal(
    NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_intelligent_solver(that, serializer);
        sse_encode_String(candidateWord, serializer);
        sse_encode_list_String(remainingWords, serializer);
        pdeCallFfi(
          generalizedFrbRustBinding,
          serializer,
          funcId: 32,
          port: port_,
        );
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiWrdlHelperIntelligentSolverCalculateStatisticalScoreConstMeta,
      argValues: [that, candidateWord, remainingWords],
      apiImpl: this,
    ),
  );

  TaskConstMeta
  get kCrateApiWrdlHelperIntelligentSolverCalculateStatisticalScoreConstMeta =>
      const TaskConstMeta(
        debugName: 'intelligent_solver_calculate_statistical_score',
        argNames: ['that', 'candidateWord', 'remainingWords'],
      );

  @override
  Future<List<String>> crateApiWrdlHelperIntelligentSolverFilterWords({
    required IntelligentSolver that,
    required List<String> words,
    required List<GuessResult> guessResults,
  }) => handler.executeNormal(
    NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_intelligent_solver(that, serializer);
        sse_encode_list_String(words, serializer);
        sse_encode_list_guess_result(guessResults, serializer);
        pdeCallFfi(
          generalizedFrbRustBinding,
          serializer,
          funcId: 33,
          port: port_,
        );
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWrdlHelperIntelligentSolverFilterWordsConstMeta,
      argValues: [that, words, guessResults],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiWrdlHelperIntelligentSolverFilterWordsConstMeta =>
      const TaskConstMeta(
        debugName: 'intelligent_solver_filter_words',
        argNames: ['that', 'words', 'guessResults'],
      );

  @override
  Future<String?> crateApiWrdlHelperIntelligentSolverGetBestGuess({
    required IntelligentSolver that,
    required List<String> remainingWords,
    required List<GuessResult> guessResults,
  }) => handler.executeNormal(
    NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_intelligent_solver(that, serializer);
        sse_encode_list_String(remainingWords, serializer);
        sse_encode_list_guess_result(guessResults, serializer);
        pdeCallFfi(
          generalizedFrbRustBinding,
          serializer,
          funcId: 34,
          port: port_,
        );
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWrdlHelperIntelligentSolverGetBestGuessConstMeta,
      argValues: [that, remainingWords, guessResults],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiWrdlHelperIntelligentSolverGetBestGuessConstMeta =>
      const TaskConstMeta(
        debugName: 'intelligent_solver_get_best_guess',
        argNames: ['that', 'remainingWords', 'guessResults'],
      );

  @override
  Future<IntelligentSolver> crateApiWrdlHelperIntelligentSolverNew({
    required List<String> words,
  }) => handler.executeNormal(
    NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(words, serializer);
        pdeCallFfi(
          generalizedFrbRustBinding,
          serializer,
          funcId: 35,
          port: port_,
        );
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_intelligent_solver,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWrdlHelperIntelligentSolverNewConstMeta,
      argValues: [words],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiWrdlHelperIntelligentSolverNewConstMeta =>
      const TaskConstMeta(
        debugName: 'intelligent_solver_new',
        argNames: ['words'],
      );

  @override
  Future<String> crateApiWrdlHelperIntelligentSolverSimulateGuessPattern({
    required IntelligentSolver that,
    required String guess,
    required String target,
  }) => handler.executeNormal(
    NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_intelligent_solver(that, serializer);
        sse_encode_String(guess, serializer);
        sse_encode_String(target, serializer);
        pdeCallFfi(
          generalizedFrbRustBinding,
          serializer,
          funcId: 36,
          port: port_,
        );
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiWrdlHelperIntelligentSolverSimulateGuessPatternConstMeta,
      argValues: [that, guess, target],
      apiImpl: this,
    ),
  );

  TaskConstMeta
  get kCrateApiWrdlHelperIntelligentSolverSimulateGuessPatternConstMeta =>
      const TaskConstMeta(
        debugName: 'intelligent_solver_simulate_guess_pattern',
        argNames: ['that', 'guess', 'target'],
      );

  @override
  Future<bool> crateApiWrdlHelperIntelligentSolverWordMatchesPattern({
    required IntelligentSolver that,
    required String word,
    required GuessResult guessResult,
  }) => handler.executeNormal(
    NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_intelligent_solver(that, serializer);
        sse_encode_String(word, serializer);
        sse_encode_box_autoadd_guess_result(guessResult, serializer);
        pdeCallFfi(
          generalizedFrbRustBinding,
          serializer,
          funcId: 37,
          port: port_,
        );
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiWrdlHelperIntelligentSolverWordMatchesPatternConstMeta,
      argValues: [that, word, guessResult],
      apiImpl: this,
    ),
  );

  TaskConstMeta
  get kCrateApiWrdlHelperIntelligentSolverWordMatchesPatternConstMeta =>
      const TaskConstMeta(
        debugName: 'intelligent_solver_word_matches_pattern',
        argNames: ['that', 'word', 'guessResult'],
      );

  @override
  bool crateApiSimpleIsEven({required int number}) => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(number, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleIsEvenConstMeta,
      argValues: [number],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiSimpleIsEvenConstMeta =>
      const TaskConstMeta(debugName: 'is_even', argNames: ['number']);

  @override
  bool crateApiSimpleIsPalindrome({required String text}) =>
      handler.executeSync(
        SyncTask(
          callFfi: () {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_String(text, serializer);
            return pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 39,
            )!;
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_bool,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiSimpleIsPalindromeConstMeta,
          argValues: [text],
          apiImpl: this,
        ),
      );

  TaskConstMeta get kCrateApiSimpleIsPalindromeConstMeta =>
      const TaskConstMeta(debugName: 'is_palindrome', argNames: ['text']);

  @override
  bool crateApiSimpleIsValidWord({required String word}) => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(word, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleIsValidWordConstMeta,
      argValues: [word],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiSimpleIsValidWordConstMeta =>
      const TaskConstMeta(debugName: 'is_valid_word', argNames: ['word']);

  @override
  void crateApiSimpleLoadWordListsFromDart({
    required List<String> answerWords,
    required List<String> guessWords,
  }) => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(answerWords, serializer);
        sse_encode_list_String(guessWords, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiSimpleLoadWordListsFromDartConstMeta,
      argValues: [answerWords, guessWords],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiSimpleLoadWordListsFromDartConstMeta =>
      const TaskConstMeta(
        debugName: 'load_word_lists_from_dart',
        argNames: ['answerWords', 'guessWords'],
      );

  @override
  double crateApiSimpleMultiplyFloats({required double a, required double b}) =>
      handler.executeSync(
        SyncTask(
          callFfi: () {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_f_64(a, serializer);
            sse_encode_f_64(b, serializer);
            return pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 42,
            )!;
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_f_64,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiSimpleMultiplyFloatsConstMeta,
          argValues: [a, b],
          apiImpl: this,
        ),
      );

  TaskConstMeta get kCrateApiSimpleMultiplyFloatsConstMeta =>
      const TaskConstMeta(debugName: 'multiply_floats', argNames: ['a', 'b']);

  @override
  void crateApiSimpleSetSolverConfig({
    required bool referenceMode,
    required bool includeKillerWords,
    required int candidateCap,
    required bool earlyTerminationEnabled,
    required double earlyTerminationThreshold,
    required bool entropyOnlyScoring,
  }) => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(referenceMode, serializer);
        sse_encode_bool(includeKillerWords, serializer);
        sse_encode_i_32(candidateCap, serializer);
        sse_encode_bool(earlyTerminationEnabled, serializer);
        sse_encode_f_64(earlyTerminationThreshold, serializer);
        sse_encode_bool(entropyOnlyScoring, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleSetSolverConfigConstMeta,
      argValues: [
        referenceMode,
        includeKillerWords,
        candidateCap,
        earlyTerminationEnabled,
        earlyTerminationThreshold,
        entropyOnlyScoring,
      ],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiSimpleSetSolverConfigConstMeta =>
      const TaskConstMeta(
        debugName: 'set_solver_config',
        argNames: [
          'referenceMode',
          'includeKillerWords',
          'candidateCap',
          'earlyTerminationEnabled',
          'earlyTerminationThreshold',
          'entropyOnlyScoring',
        ],
      );

  @override
  int crateApiSimpleSimpleHash({required String input}) => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(input, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 44)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleSimpleHashConstMeta,
      argValues: [input],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiSimpleSimpleHashConstMeta =>
      const TaskConstMeta(debugName: 'simple_hash', argNames: ['input']);

  @override
  String crateApiSimpleSimulateGuessPattern({
    required String guess,
    required String target,
  }) => handler.executeSync(
    SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(guess, serializer);
        sse_encode_String(target, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleSimulateGuessPatternConstMeta,
      argValues: [guess, target],
      apiImpl: this,
    ),
  );

  TaskConstMeta get kCrateApiSimpleSimulateGuessPatternConstMeta =>
      const TaskConstMeta(
        debugName: 'simulate_guess_pattern',
        argNames: ['guess', 'target'],
      );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_WordManager => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_WordManager => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager;

  @protected
  WordManager
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
    raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WordManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WordManager
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
    raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WordManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WordManager
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
    raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WordManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String_None(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
      dco_decode_list_record_string_string(
        raw,
      ).map((e) => MapEntry(e.$1, e.$2)),
    );
  }

  @protected
  WordManager
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
    raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WordManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  GuessResult dco_decode_box_autoadd_guess_result(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_guess_result(raw);
  }

  @protected
  int dco_decode_box_autoadd_i_32(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  IntelligentSolver dco_decode_box_autoadd_intelligent_solver(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_intelligent_solver(raw);
  }

  @protected
  double dco_decode_f_64(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  GuessResult dco_decode_guess_result(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GuessResult(
      word: dco_decode_String(arr[0]),
      results: dco_decode_list_letter_result(arr[1]),
    );
  }

  @protected
  int dco_decode_i_32(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  IntelligentSolver dco_decode_intelligent_solver(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return IntelligentSolver(words: dco_decode_list_String(arr[0]));
  }

  @protected
  LetterResult dco_decode_letter_result(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LetterResult.values[raw as int];
  }

  @protected
  LetterResultArray5 dco_decode_letter_result_array_5(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LetterResultArray5(
      (raw as List<dynamic>).map(dco_decode_letter_result).toList(),
    );
  }

  @protected
  List<String> dco_decode_list_String(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<GuessResult> dco_decode_list_guess_result(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_guess_result).toList();
  }

  @protected
  List<LetterResult> dco_decode_list_letter_result(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_letter_result).toList();
  }

  @protected
  Uint32List dco_decode_list_prim_u_32_strict(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint32List;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, List<String>)> dco_decode_list_record_string_list_string(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_list_string)
        .toList();
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  String? dco_decode_opt_String(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_32(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_32(raw);
  }

  @protected
  (bool, bool, int, bool, double, bool)
  dco_decode_record_bool_bool_i_32_bool_f_64_bool(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6) {
      throw Exception('Expected 6 elements, got ${arr.length}');
    }
    return (
      dco_decode_bool(arr[0]),
      dco_decode_bool(arr[1]),
      dco_decode_i_32(arr[2]),
      dco_decode_bool(arr[3]),
      dco_decode_f_64(arr[4]),
      dco_decode_bool(arr[5]),
    );
  }

  @protected
  (String, List<String>) dco_decode_record_string_list_string(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_String(arr[0]), dco_decode_list_String(arr[1]));
  }

  @protected
  (String, String) dco_decode_record_string_string(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_String(arr[0]), dco_decode_String(arr[1]));
  }

  @protected
  int dco_decode_u_32(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  WordManager
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WordManagerImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  WordManager
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WordManagerImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  WordManager
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WordManagerImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Map<String, String> sse_decode_Map_String_String_None(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  WordManager
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WordManagerImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  GuessResult sse_decode_box_autoadd_guess_result(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return sse_decode_guess_result(deserializer);
  }

  @protected
  int sse_decode_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return sse_decode_i_32(deserializer);
  }

  @protected
  IntelligentSolver sse_decode_box_autoadd_intelligent_solver(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return sse_decode_intelligent_solver(deserializer);
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  GuessResult sse_decode_guess_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_word = sse_decode_String(deserializer);
    final var_results = sse_decode_list_letter_result(deserializer);
    return GuessResult(word: var_word, results: var_results);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  IntelligentSolver sse_decode_intelligent_solver(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_words = sse_decode_list_String(deserializer);
    return IntelligentSolver(words: var_words);
  }

  @protected
  LetterResult sse_decode_letter_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_i_32(deserializer);
    return LetterResult.values[inner];
  }

  @protected
  LetterResultArray5 sse_decode_letter_result_array_5(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_list_letter_result(deserializer);
    return LetterResultArray5(inner);
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<GuessResult> sse_decode_list_guess_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <GuessResult>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_guess_result(deserializer));
    }
    return ans_;
  }

  @protected
  List<LetterResult> sse_decode_list_letter_result(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <LetterResult>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_letter_result(deserializer));
    }
    return ans_;
  }

  @protected
  Uint32List sse_decode_list_prim_u_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, List<String>)> sse_decode_list_record_string_list_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <(String, List<String>)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_list_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return sse_decode_String(deserializer);
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return sse_decode_box_autoadd_i_32(deserializer);
    } else {
      return null;
    }
  }

  @protected
  (bool, bool, int, bool, double, bool)
  sse_decode_record_bool_bool_i_32_bool_f_64_bool(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_field0 = sse_decode_bool(deserializer);
    final var_field1 = sse_decode_bool(deserializer);
    final var_field2 = sse_decode_i_32(deserializer);
    final var_field3 = sse_decode_bool(deserializer);
    final var_field4 = sse_decode_f_64(deserializer);
    final var_field5 = sse_decode_bool(deserializer);
    return (
      var_field0,
      var_field1,
      var_field2,
      var_field3,
      var_field4,
      var_field5,
    );
  }

  @protected
  (String, List<String>) sse_decode_record_string_list_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_field0 = sse_decode_String(deserializer);
    final var_field1 = sse_decode_list_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, String) sse_decode_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_field0 = sse_decode_String(deserializer);
    final var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
    WordManager self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WordManagerImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
    WordManager self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WordManagerImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
    WordManager self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WordManagerImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void sse_encode_Map_String_String_None(
    Map<String, String> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
      self.entries.map((e) => (e.key, e.value)).toList(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWordManager(
    WordManager self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WordManagerImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_guess_result(
    GuessResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_guess_result(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_intelligent_solver(
    IntelligentSolver self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_intelligent_solver(self, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_guess_result(GuessResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.word, serializer);
    sse_encode_list_letter_result(self.results, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_intelligent_solver(
    IntelligentSolver self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.words, serializer);
  }

  @protected
  void sse_encode_letter_result(LetterResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_letter_result_array_5(
    LetterResultArray5 self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_letter_result(self.inner, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_guess_result(
    List<GuessResult> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_guess_result(item, serializer);
    }
  }

  @protected
  void sse_encode_list_letter_result(
    List<LetterResult> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_letter_result(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_32_strict(
    Uint32List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint32List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_list_string(
    List<(String, List<String>)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_list_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_string(
    List<(String, String)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_32(self, serializer);
    }
  }

  @protected
  void sse_encode_record_bool_bool_i_32_bool_f_64_bool(
    (bool, bool, int, bool, double, bool) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.$1, serializer);
    sse_encode_bool(self.$2, serializer);
    sse_encode_i_32(self.$3, serializer);
    sse_encode_bool(self.$4, serializer);
    sse_encode_f_64(self.$5, serializer);
    sse_encode_bool(self.$6, serializer);
  }

  @protected
  void sse_encode_record_string_list_string(
    (String, List<String>) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_list_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_string(
    (String, String) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class WordManagerImpl extends RustOpaque implements WordManager {
  // Not to be used by end users
  WordManagerImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WordManagerImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WordManager,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WordManager,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WordManagerPtr,
  );

  List<String> get answerWords => RustLib.instance.api
      .crateApiWrdlHelperWordManagerAutoAccessorGetAnswerWords(that: this);

  List<String> get guessWords => RustLib.instance.api
      .crateApiWrdlHelperWordManagerAutoAccessorGetGuessWords(that: this);

  String? get optimalFirstGuess => RustLib.instance.api
      .crateApiWrdlHelperWordManagerAutoAccessorGetOptimalFirstGuess(
        that: this,
      );

  set answerWords(List<String> answerWords) => RustLib.instance.api
      .crateApiWrdlHelperWordManagerAutoAccessorSetAnswerWords(
        that: this,
        answerWords: answerWords,
      );

  set guessWords(List<String> guessWords) => RustLib.instance.api
      .crateApiWrdlHelperWordManagerAutoAccessorSetGuessWords(
        that: this,
        guessWords: guessWords,
      );

  set optimalFirstGuess(String? optimalFirstGuess) => RustLib.instance.api
      .crateApiWrdlHelperWordManagerAutoAccessorSetOptimalFirstGuess(
        that: this,
        optimalFirstGuess: optimalFirstGuess,
      );

  /// Compute the optimal first guess once at startup
  ///
  /// Uses proven optimal first guesses from statistical analysis.
  /// No computation needed - these are already known to be optimal!
  Future<void> computeOptimalFirstGuess() => RustLib.instance.api
      .crateApiWrdlHelperWordManagerComputeOptimalFirstGuess(that: this);

  Future<void> getAnswerWords() => RustLib.instance.api
      .crateApiWrdlHelperWordManagerGetAnswerWords(that: this);

  Future<void> getGuessWords() => RustLib.instance.api
      .crateApiWrdlHelperWordManagerGetGuessWords(that: this);

  Future<String?> getOptimalFirstGuess() => RustLib.instance.api
      .crateApiWrdlHelperWordManagerGetOptimalFirstGuess(that: this);

  Future<void> loadWords() =>
      RustLib.instance.api.crateApiWrdlHelperWordManagerLoadWords(that: this);
}
